name: PyInstaller

on:
  push:
    tags:
      - '*'

  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - name: Extract Version
        id: extract_version
        run: |
          echo "::set-output name=version::$(echo ${{ github.ref }} | sed 's/v//1')"
        shell: bash
      - name: Create Release
        id: create_release
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false
      - name: Debug
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo ${{ steps.extract_version.outputs.version }}

    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  make_artifact:
    needs: create_release

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    runs-on: ${{ matrix.os }}

    env:
      ARTIFACT_PATH: dist/loveletter.zip
      # ARTIFACT_NAME: loveletter-${{ runner.os }}.zip

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Set up environment
        run: |
          # can't use runner context in env clause above
          echo "ARTIFACT_NAME=loveletter-${{ runner.os }}.zip" >> $GITHUB_ENV
        shell: bash
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt --source-dir=vendored
      - name: Run PyInstaller
        run: |
          pyinstaller -p src -n loveletter_cli src/loveletter_cli/__main__.py
      - name: ZIP archive
        run: |
          tar -acf ${{ env.ARTIFACT_PATH }} -C dist loveletter_cli
      - name: Upload artifact to workflow
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
      - name: Upload release asset
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: application/zip
