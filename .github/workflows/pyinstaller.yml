name: PyInstaller

on:
  push:
    tags:
      - '*'

  workflow_dispatch:

jobs:
  create_release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Extract Version
        id: extract_version
        run: |
          pip3 install setuptools_scm
          VERSION=$(python3 -c "import setuptools_scm as scm; print(scm.get_version())")
          echo "::set-output name=version::$VERSION"
        shell: bash
      - name: Create Release
        id: create_release
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ steps.extract_version.outputs.version }}
          draft: false
          prerelease: false

    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  make_artifact:
    needs: create_release

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Set up environment
        run: |
          echo "ARTIFACT_NAME=loveletter-v${{ needs.create_release.outputs.version }}-${{ runner.os }}.exe" >> $GITHUB_ENV
        shell: bash
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt --source-dir=vendored
      - name: Run PyInstaller
        run: |
          pyinstaller --onefile -p src -n loveletter_cli src/loveletter_cli/__main__.py
          ARTIFACT_PATH=$(find dist -type f -name "loveletter_cli*")
          echo "ARTIFACT_PATH=$ARTIFACT_PATH" >> $GITHUB_ENV
        shell: bash
      - name: Upload artifact to workflow
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.ARTIFACT_PATH }}
          if-no-files-found: error
      - name: Upload release asset
        if: ${{ github.event_name != 'workflow_dispatch' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_PATH }}
          asset_name: ${{ env.ARTIFACT_NAME }}
          asset_content_type: application/octet-stream
